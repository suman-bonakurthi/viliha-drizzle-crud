import { CrudConfig } from "../interfaces/crud-config.interface";
import { ICrudService, OperationOptions, PaginationOptions } from "../interfaces/crud-service.interface";
export declare abstract class BaseCrudService<T extends Record<string, any>, CreateDto, UpdateDto, FilterDto> implements ICrudService<T, CreateDto, UpdateDto, FilterDto> {
    protected readonly table: any;
    protected readonly config: CrudConfig;
    protected readonly defaultConfig: CrudConfig;
    constructor(table: any, config?: CrudConfig);
    protected abstract validateCreate(data: CreateDto): Promise<void>;
    protected abstract validateUpdate(id: any, data: UpdateDto): Promise<void>;
    protected abstract mapCreateDtoToEntity(data: CreateDto): Partial<T>;
    protected abstract mapUpdateDtoToEntity(data: UpdateDto): Partial<T>;
    protected beforeCreate(data: CreateDto): Promise<CreateDto>;
    protected afterCreate(entity: T): Promise<void>;
    protected beforeUpdate(id: any, data: UpdateDto): Promise<UpdateDto>;
    protected afterUpdate(entity: T): Promise<void>;
    protected beforeDelete(id: any): Promise<void>;
    protected afterDelete(id: any): Promise<void>;
    protected beforeSoftDelete(id: any): Promise<void>;
    protected afterSoftDelete(id: any): Promise<void>;
    protected beforeRestore(id: any): Promise<void>;
    protected afterRestore(entity: T): Promise<void>;
    find(id: any, options?: OperationOptions): Promise<T | null>;
    findOne(where: Partial<T>, options?: OperationOptions): Promise<T | null>;
    findAll(filters?: FilterDto, pagination?: PaginationOptions, options?: OperationOptions): Promise<{
        data: T[];
        total: number;
        page: number;
        limit: number;
    }>;
    create(data: CreateDto, options?: OperationOptions): Promise<T>;
    update(id: any, data: UpdateDto, options?: OperationOptions): Promise<T>;
    softDelete(id: any, options?: OperationOptions): Promise<boolean>;
    restore(id: any, options?: OperationOptions): Promise<T>;
    delete(id: any, options?: OperationOptions): Promise<boolean>;
    massCreate(data: CreateDto[], options?: OperationOptions): Promise<T[]>;
    massUpdate(ids: any[], data: UpdateDto, options?: OperationOptions): Promise<T[]>;
    massSoftDelete(ids: any[], options?: OperationOptions): Promise<boolean>;
    massRestore(ids: any[], options?: OperationOptions): Promise<T[]>;
    massDelete(ids: any[], options?: OperationOptions): Promise<boolean>;
    exists(id: any, options?: OperationOptions): Promise<boolean>;
    count(filters?: FilterDto, options?: OperationOptions): Promise<number>;
    protected buildWhereClause(filters?: FilterDto): any;
    protected applyRelations(query: any, relations: string[]): any;
    protected executeInTransaction<R>(operation: (tx: any) => Promise<R>, existingTransaction?: any): Promise<R>;
    protected getEntityName(): string;
    private get db();
    private eq;
    private isNull;
}
